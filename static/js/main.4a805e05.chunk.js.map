{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["createEmptyGrid","gridText","r","push","c","letter","marked","App","state","grid","cipher","cursorRow","cursorColumn","cursorPlain","updateCell","newCell","_this","newGrid","forEach","row","ri","cell","ci","setState","toggleMark","force","arguments","length","undefined","Object","objectSpread","onClickCell","inputLetter","move","_this$state","defineProperty","handleKey","key","crossGrids","_this$state2","_this2","this","_this$state3","focusLetter","react_default","a","createElement","className","map","classNames","join","onClick","react_keyboard_event_handler_default","handleKeys","onKeyEvent","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a805e05.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport './App.css';\n\ninterface Props {}\n\ninterface CellData {\n\tletter: string;\n\tmarked: boolean;\n}\n\ninterface State {\n\tgrid: CellData[][];\n\tcipher: {\n\t\t[letter: string]: string;\n\t};\n\tcursorRow: number;\n\tcursorColumn: number;\n\tcursorPlain: boolean;\n}\n\nconst createEmptyGrid = () => {\n\tconst gridText: CellData[][] = [];\n\tfor (let r = 0; r < 12; r += 1) {\n\t\tgridText.push([]);\n\t\tfor (let c = 0; c < 12; c += 1) {\n\t\t\tgridText[r].push({\n\t\t\t\tletter: '',\n\t\t\t\tmarked: false,\n\t\t\t});\n\t\t}\n\t}\n\treturn gridText;\n};\n\nclass App extends Component<Props, State> {\n\treadonly state: Readonly<State> = {\n\t\tgrid: createEmptyGrid(),\n\t\tcipher: {},\n\t\tcursorRow: 0,\n\t\tcursorColumn: 0,\n\t\tcursorPlain: false,\n\t};\n\n\tupdateCell = (r: number, c: number, newCell: CellData) => {\n\t\tconst { grid } = this.state;\n\t\tconst newGrid: CellData[][] = [];\n\t\tgrid.forEach((row, ri) => {\n\t\t\tnewGrid.push([]);\n\t\t\trow.forEach((cell, ci) => {\n\t\t\t\tnewGrid[ri].push((r === ri && c === ci) ? newCell : cell);\n\t\t\t});\n\t\t});\n\t\tthis.setState({ grid: newGrid });\n\t}\n\n\ttoggleMark = (r: number, c: number, force: boolean = false) => {\n\t\tconst cell = this.state.grid[r][c];\n\t\tthis.updateCell(r, c, {\n\t\t\t...cell,\n\t\t\tmarked: !cell.marked || force,\n\t\t});\n\t}\n\n\tonClickCell = (cursorRow: number, cursorColumn: number, cursorPlain: boolean) => {\n\t\tif (cursorRow === this.state.cursorRow\n\t\t\t&& cursorColumn === this.state.cursorColumn\n\t\t\t&& cursorPlain === this.state.cursorPlain) {\n\t\t\tthis.toggleMark(cursorRow, cursorColumn);\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tcursorRow,\n\t\t\t\tcursorColumn,\n\t\t\t\tcursorPlain,\n\t\t\t});\n\t\t}\n\t}\n\n\tinputLetter = (letter: string, move: boolean = true) => {\n\t\tconst {\n\t\t\tcursorRow,\n\t\t\tcursorColumn,\n\t\t\tcursorPlain,\n\t\t\tgrid,\n\t\t\tcipher,\n\t\t} = this.state;\n\t\tconst cell = grid[cursorRow][cursorColumn];\n\t\tif (cursorPlain) {\n\t\t\tif (cell.letter) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tcipher: {\n\t\t\t\t\t\t...cipher,\n\t\t\t\t\t\t[cell.letter]: letter,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tthis.toggleMark(cursorRow, cursorColumn, !!letter);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.updateCell(cursorRow, cursorColumn, {\n\t\t\t\t...cell,\n\t\t\t\tletter,\n\t\t\t});\n\t\t\tif (move) {\n\t\t\t\tthis.handleKey('right', true);\n\t\t\t}\n\t\t}\n\t}\n\n\thandleKey = (key: string, crossGrids: boolean = false) => {\n\t\tconst {\n\t\t\tcursorRow,\n\t\t\tcursorColumn,\n\t\t\tcursorPlain,\n\t\t} = this.state;\n\t\tswitch (key) {\n\t\t\tcase 'up':\n\t\t\t\tif (cursorRow > 0) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcursorRow: cursorRow - 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'down':\n\t\t\t\tif (cursorRow < 11) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcursorRow: cursorRow + 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'backspace':\n\t\t\tcase 'delete':\n\t\t\t\tthis.inputLetter('', false);\n\t\t\t\tbreak;\n\t\t\tcase 'left':\n\t\t\t\tif (cursorColumn === 0) {\n\t\t\t\t\tif (cursorRow === 0) {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tcursorRow: 11,\n\t\t\t\t\t\t\tcursorColumn: 11,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tcursorRow: cursorRow - 1,\n\t\t\t\t\t\t\tcursorColumn: 11,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcursorColumn: cursorColumn - 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'right':\n\t\t\t\tif (cursorColumn === 11) {\n\t\t\t\t\tif (cursorRow === 11) {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tcursorRow: 0,\n\t\t\t\t\t\t\tcursorColumn: 0,\n\t\t\t\t\t\t\tcursorPlain: !cursorPlain && crossGrids,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tcursorRow: cursorRow + 1,\n\t\t\t\t\t\t\tcursorColumn: 0,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcursorColumn: cursorColumn + 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'space':\n\t\t\t\tthis.toggleMark(cursorRow, cursorColumn);\n\t\t\t\tbreak;\n\t\t\tcase 'enter':\n\t\t\t\tthis.setState({\n\t\t\t\t\tcursorPlain: !cursorPlain,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.inputLetter(key);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tgrid,\n\t\t\tcipher,\n\t\t\tcursorRow,\n\t\t\tcursorColumn,\n\t\t\tcursorPlain,\n\t\t} = this.state;\n\t\tconst focusLetter = grid[cursorRow][cursorColumn].letter;\n\t\treturn (\n\t\t\t<div className=\"layout\">\n\t\t\t\t<div className=\"grid\">\n\t\t\t\t\t{grid.map((row, r) => (\n\t\t\t\t\t\t<div key={r} className=\"row\">\n\t\t\t\t\t\t\t{row.map((cell, c) => {\n\t\t\t\t\t\t\t\tconst classNames = ['cell'];\n\t\t\t\t\t\t\t\tif (cell.marked) {\n\t\t\t\t\t\t\t\t\tclassNames.push('marked');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (cursorRow === r && cursorColumn === c) {\n\t\t\t\t\t\t\t\t\tclassNames.push(cursorPlain ? 'withCursorShadow' : 'withCursor');\n\t\t\t\t\t\t\t\t} else if (cell.letter && cell.letter === focusLetter) {\n\t\t\t\t\t\t\t\t\tclassNames.push('highlighted');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tkey={c}\n\t\t\t\t\t\t\t\t\t\tclassName={classNames.join(' ')}\n\t\t\t\t\t\t\t\t\t\tonClick={() => this.onClickCell(r, c, false)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{cell.letter}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"spacer\"></div>\n\t\t\t\t<div className=\"grid\">\n\t\t\t\t\t{grid.map((row, r) => (\n\t\t\t\t\t\t<div key={r} className=\"row\">\n\t\t\t\t\t\t\t{row.map((cell, c) => {\n\t\t\t\t\t\t\t\tconst classNames = ['cell'];\n\t\t\t\t\t\t\t\tif (cell.marked) {\n\t\t\t\t\t\t\t\t\tclassNames.push('marked');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (cursorRow === r && cursorColumn === c) {\n\t\t\t\t\t\t\t\t\tclassNames.push(cursorPlain ? 'withCursor' : 'withCursorShadow');\n\t\t\t\t\t\t\t\t} else if (cell.letter && cell.letter === focusLetter) {\n\t\t\t\t\t\t\t\t\tclassNames.push('highlighted');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tkey={c}\n\t\t\t\t\t\t\t\t\t\tclassName={classNames.join(' ')}\n\t\t\t\t\t\t\t\t\t\tonClick={() => this.onClickCell(r, c, true)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{(cell.letter && cipher[cell.letter]) || ''}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<KeyboardEventHandler\n\t\t\t\t\thandleKeys={[\n\t\t\t\t\t\t'alphabetic',\n\t\t\t\t\t\t'up',\n\t\t\t\t\t\t'down',\n\t\t\t\t\t\t'left',\n\t\t\t\t\t\t'right',\n\t\t\t\t\t\t'space',\n\t\t\t\t\t\t'backspace',\n\t\t\t\t\t\t'delete',\n\t\t\t\t\t\t'enter',\n\t\t\t\t\t]}\n\t\t\t\t\tonKeyEvent={this.handleKey}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}